<Score amountOfBlues="@amountOfBlues" amountOfWhites="@amountOfWhites" amountOfReds="@amountOfReds" restartGame="OnInitialized" gameOver="@gameOver" />
<div class="Board @Player.ToString().ToLower()">
    @for (int row = 0; row < Height; row++)
    {
        <div class="row">
            @for (int column = 0; column < Width; column++)
            {
                var r = row;
                var c = column;
                <Fiche Color="@Boardstate[r][c]" Row="@r" Col="@c" Flipped="Play" />
                //Dit laat de value van elk position op de website zien
                @* <Fiche Color="@Boardstate[r][c]" Row="@r" Col="@c" Flipped="Play">
                    <span>@PositionValue[r][c]</span>
                </Fiche> *@
            }
        </div>
    }
</div>

<ModeSelector ModeChanged="ModeSelected" />

@code {
    public GameMode SelectedMode { get; set; } = GameMode.TwoPlayers;
    void ModeSelected(GameMode newMode)
    {
        OnInitialized();
        SelectedMode = newMode;
    }

    public int Width { get; set; } = 8;
    public int Height { get; set; } = 8;
    int amountOfReds = 0;
    int amountOfBlues = 0;
    int amountOfWhites = 0;
    bool gameOver = false;

    public Colors[][] Boardstate { get; set; } = new Colors[8][]
    {
        new Colors[8], new Colors[8], new Colors[8], new Colors[8],
        new Colors[8], new Colors[8], new Colors[8], new Colors[8]
    };

    public int[][] PositionValue { get; set; } = new int[8][]
    {
        new int[8] { 100, -20, 10, 5, 5, 10, -20, 100 },
        new int[8] { -20, -50, -2, -2, -2, -2, -50, -20 },
        new int[8] { 10, -2, 5, 1, 1, 5, -2, 10 },
        new int[8] { 5, -2, 1, 0, 0, 1, -2, 5 },
        new int[8] { 5, -2, 1, 0, 0, 1, -2, 5 },
        new int[8] { 10, -2, 5, 1, 1, 5, -2, 10 },
        new int[8] { -20, -50, -2, -2, -2, -2, -50, -20 },
        new int[8] { 100, -20, 10, 5, 5, 10, -20, 100 }
    };

    async Task Play((int r, int c) pos)
    {
        if (SelectedMode == GameMode.TwoPlayers || (Player == Colors.Blue && Boardstate[pos.r][pos.c] == Colors.White))
        {
            bool moveWasValid = ChangeColor(pos.r, pos.c, Player);
            if (moveWasValid)
            {
                ChangePlayer();
                CheckBothPlayers();
                if (!HasValidMove(Player))
                {
                    Console.WriteLine("No valid move, skipping turn");
                    CheckBothPlayers();
                    ChangePlayer();
                }

                if (SelectedMode != GameMode.TwoPlayers && Player == Colors.Red)
                {
                    await Task.Delay(1000);
                    GiveTurnToBot(SelectedMode);
                }
            }
        }
    }

    public void CountScore()
    {
        amountOfReds = 0;
        amountOfBlues = 0;
        amountOfWhites = 0;

        for (int row = 0; row < Boardstate.Length; row++)
        {
            for (int col = 0; col < Boardstate[row].Length; col++)
            {
                Colors currentColor = Boardstate[row][col];

                if (currentColor == Colors.Red)
                {
                    amountOfReds += 1;
                }
                else if (currentColor == Colors.Blue)
                {
                    amountOfBlues += 1;
                }
                else
                {
                    amountOfWhites += 1;
                }
            }
        }
        Console.WriteLine($"amount of Reds: {amountOfReds}, amount of Blues: {amountOfBlues}, amount of whites: {amountOfWhites}");
    }

    public Colors Player { get; set; } = Colors.Blue;

    void ChangePlayer() => Player = Player == Colors.Red ? Colors.Blue : Colors.Red;

    protected override void OnInitialized()
    {
        gameOver = false;
        Boardstate = new Colors[Height][];
        for (int row = 0; row < Height; row++)
        {
            Boardstate[row] = new Colors[Width];
            for (int col = 0; col < Width; col++)
            {
                Boardstate[row][col] = Colors.White;
            }
        }
        Boardstate[3][3] = Colors.Red;
        Boardstate[3][4] = Colors.Blue;
        Boardstate[4][3] = Colors.Blue;
        Boardstate[4][4] = Colors.Red;

        CountScore();
        if (Player == Colors.Red) ChangePlayer();
    }

    public void CheckBothPlayers()
    {
        if (!HasValidMove(Colors.Blue) && !HasValidMove(Colors.Red))
        {
            gameOver = true;
        }
    }

    public bool ChangeColor(int row, int column, Colors player)
    {
        if (Boardstate[row][column] != Colors.White)
            return false;

        Console.WriteLine($"Evaluating ({row},{column}) → Value: {PositionValue[row][column]}");
        bool validMove = false;
        var directions = new (int directionRow, int directionColumn)[]
        {
        (-1, 0), (1, 0), (0, -1), (0, 1),
        (-1, -1), (-1, 1), (1, -1), (1, 1)
        };

        var opponent = player == Colors.Red ? Colors.Blue : Colors.Red;
        List<(int, int)> validPositions = new();

        foreach (var (dr, dc) in directions)
        {
            int r = row + dr;
            int c = column + dc;
            List<(int, int)> tempPositions = new();
            bool DifferentColorInbetween = false;

            while (r >= 0 && r < Height && c >= 0 && c < Width)
            {
                if (Boardstate[r][c] == opponent)
                {
                    DifferentColorInbetween = true;
                    tempPositions.Add((r, c));
                    r += dr;
                    c += dc;
                }
                else if (Boardstate[r][c] == player && DifferentColorInbetween)
                {
                    validMove = true;
                    validPositions.AddRange(tempPositions);
                    break;
                }
                else
                {
                    break;
                }
            }
        }

        if (validMove)
        {
            Boardstate[row][column] = player;
            foreach (var (r, c) in validPositions)
            {
                Boardstate[r][c] = player;
            }
            CountScore();
            return true;
        }

        return false;
    }


    public bool HasValidMove(Colors player)
    {
        var opponent = player == Colors.Red ? Colors.Blue : Colors.Red;
        var directions = new (int directionRow, int directionColumn)[]
        {
            (-1, 0), (1, 0), (0, -1), (0, 1),     // Up, Down, Left, Right
            (-1, -1), (-1, 1), (1, -1), (1, 1)    // LeftUp, leftDown, RightUp, RightDown
        };

        for (int row = 0; row < Height; row++)
        {
            for (int col = 0; col < Width; col++)
            {
                if (Boardstate[row][col] != Colors.White)
                    continue;

                foreach (var (dr, dc) in directions)
                {
                    int r = row + dr;
                    int c = col + dc;
                    bool DifferentColorInbetween = false;

                    while (r >= 0 && r < Height && c >= 0 && c < Width)
                    {
                        if (Boardstate[r][c] == opponent)
                        {
                            DifferentColorInbetween = true;
                            r += dr;
                            c += dc;
                        }
                        else if (Boardstate[r][c] == player && DifferentColorInbetween)
                        {
                            return true;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }
        }
        return false;
    }

    void SetMode(GameMode mode)
    {
        SelectedMode = mode;
        Console.WriteLine($"Game mode set to: {mode}");
    }

    void GiveTurnToBot(GameMode mode)
    {
        if (Player != Colors.Blue)
        {
            Console.WriteLine(mode);

            Colors botColor = Player;

            (int row, int col)? move = mode switch
            {
                GameMode.Easy => GetRandomBotMove(botColor, mode),
                GameMode.Medium => GetSmartBotMove(botColor),
                GameMode.Hard => GetAdvancedBotMove(botColor),
                _ => null
            };

            if (move.HasValue)
            {
                bool moveWasValid = ChangeColor(move.Value.row, move.Value.col, botColor);
                if (moveWasValid)
                {
                    ChangePlayer();

                    if (!HasValidMove(Player))
                    {
                        Console.WriteLine("No valid move, skipping turn");
                        ChangePlayer();
                        GiveTurnToBot(SelectedMode);
                    }
                }
            }
            else
            {
                Console.WriteLine("Bot has no valid moves. Skipping turn.");
                ChangePlayer();

                if (!HasValidMove(Player))
                {
                    Console.WriteLine("Next player also has no valid moves. Game might be over.");
                }
                else if (SelectedMode != GameMode.TwoPlayers && Player == Colors.Red)
                {
                    GiveTurnToBot(SelectedMode);
                }
            }
        }
    }




    (int row, int col)? GetRandomBotMove(Colors botColor, GameMode mode)
    {
        List<(int, int)> validMoves = new();

        for (int row = 0; row < Height; row++)
        {
            for (int col = 0; col < Width; col++)
            {
                if (Boardstate[row][col] == Colors.White)
                {
                    if (IsValidMove(row, col, botColor))
                    {
                        validMoves.Add((row, col));
                    }
                }
            }
        }

        if (validMoves.Count == 0)
            return null;

        return validMoves[new Random().Next(validMoves.Count)];
    }

    (int row, int col)? GetSmartBotMove(Colors botColor)
    {
        List<(int row, int col, int flipCount)> moves = new();

        for (int row = 0; row < Height; row++)
        {
            for (int col = 0; col < Width; col++)
            {
                if (Boardstate[row][col] == Colors.White && IsValidMove(row, col, botColor))
                {
                    int flipCount = CountFlippablePieces(row, col, botColor);
                    moves.Add((row, col, flipCount));
                }
            }
        }

        if (moves.Count == 0)
            return null;

        return moves.OrderByDescending(m => m.flipCount).First() switch
        {
            var best => (best.row, best.col)
        };
    }

    (int row, int col)? GetAdvancedBotMove(Colors botColor)
    {
        List<(int row, int col, int score)> moves = new();

        for (int row = 0; row < Height; row++)
        {
            for (int col = 0; col < Width; col++)
            {
                if (Boardstate[row][col] == Colors.White && IsValidMove(row, col, botColor))
                {
                    int flipCount = CountFlippablePieces(row, col, botColor);
                    int positionScore = PositionValue[row][col];
                    int totalScore = flipCount * 2 + positionScore;
                    moves.Add((row, col, totalScore));
                }
            }
        }

        if (moves.Count == 0)
            return null;

        return moves.OrderByDescending(m => m.score).First() switch
        {
            var best => (best.row, best.col)
        };
    }

    bool IsValidMove(int row, int col, Colors player)
    {
        var opponent = player == Colors.Red ? Colors.Blue : Colors.Red;
        var directions = new (int, int)[]
        {
        (-1, 0), (1, 0), (0, -1), (0, 1),
        (-1, -1), (-1, 1), (1, -1), (1, 1)
        };

        foreach (var (dr, dc) in directions)
        {
            int r = row + dr;
            int c = col + dc;
            bool foundOpponent = false;

            while (r >= 0 && r < Height && c >= 0 && c < Width)
            {
                if (Boardstate[r][c] == opponent)
                {
                    foundOpponent = true;
                    r += dr;
                    c += dc;
                }
                else if (Boardstate[r][c] == player && foundOpponent)
                {
                    return true;
                }
                else
                {
                    break;
                }
            }
        }

        return false;
    }

    int CountFlippablePieces(int row, int col, Colors player)
    {
        var opponent = player == Colors.Red ? Colors.Blue : Colors.Red;
        var directions = new (int, int)[]
        {
        (-1, 0), (1, 0), (0, -1), (0, 1),
        (-1, -1), (-1, 1), (1, -1), (1, 1)
        };

        int count = 0;

        foreach (var (dr, dc) in directions)
        {
            int r = row + dr;
            int c = col + dc;
            int tempCount = 0;
            bool foundOpponent = false;

            while (r >= 0 && r < Height && c >= 0 && c < Width)
            {
                if (Boardstate[r][c] == opponent)
                {
                    foundOpponent = true;
                    tempCount++;
                    r += dr;
                    c += dc;
                }
                else if (Boardstate[r][c] == player && foundOpponent)
                {
                    count += tempCount;
                    break;
                }
                else
                {
                    break;
                }
            }
        }

        return count;
    }
}
